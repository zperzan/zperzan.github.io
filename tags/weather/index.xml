<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Weather | Zach Perzan</title>
    <link>https://zperzan.github.io/tags/weather/</link>
      <atom:link href="https://zperzan.github.io/tags/weather/index.xml" rel="self" type="application/rss+xml" />
    <description>Weather</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 25 Jul 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://zperzan.github.io/img/icon-192.png</url>
      <title>Weather</title>
      <link>https://zperzan.github.io/tags/weather/</link>
    </image>
    
    <item>
      <title>Scraping 5-min weather data from Weather Underground</title>
      <link>https://zperzan.github.io/projects/scrape-weather-underground/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://zperzan.github.io/projects/scrape-weather-underground/</guid>
      <description>&lt;p&gt;Weather Undergound stores data from over 250,000 personal weather stations across the world. Unfortunately, historical data are not easy to access. It&amp;rsquo;s possible to view tables of 5-min data from a single day &amp;ndash; see &lt;a href=&#34;https://www.wunderground.com/dashboard/pws/KCOCREST39/table/2021-07-25/2021-07-25/daily&#34;&gt;this example&lt;/a&gt; from a station outside Crested Butte, Colorado &amp;ndash; but if you try to scrape the http using something like Python&amp;rsquo;s &lt;code&gt;requests&lt;/code&gt; library, the tables appear blank.&lt;/p&gt;
&lt;p&gt;Weather Underground has a security policy that blocks automated requests from viewing data stored in each table. This is where &lt;a href=&#34;https://www.selenium.dev/documentation/en/webdriver/&#34;&gt;Selenium WebDriver&lt;/a&gt; comes in. WebDriver is an toolbox for natively running web browsers, so when you render a page with WebDriver, Weather Underground thinks a regular user is accessing their website and you can access the full source code.&lt;/p&gt;
&lt;p&gt;To run the script, the first thing to do is ensure that &lt;a href=&#34;https://chromedriver.chromium.org/&#34;&gt;ChromeDriver&lt;/a&gt; is installed. Note that you have to match the ChromeDriver version to whichever version of Chrome is installed on your machine. It&amp;rsquo;s also possible to use something other than Chrome, for example &lt;a href=&#34;https://github.com/mozilla/geckodriver/releases&#34;&gt;geckodriver&lt;/a&gt; for Firefox or &lt;a href=&#34;https://webkit.org/blog/6900/webdriver-support-in-safari-10/&#34;&gt;safaridriver&lt;/a&gt; for Safari.&lt;/p&gt;
&lt;p&gt;Next, update the path to chromedriver in &lt;code&gt;scrape_wunderground.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set the absolute path to chromedriver&lt;/span&gt;
chromedriver_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/path/to/chromedriver&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As long as BeautifulSoup and Selenium are installed, the script should work fine after that. However, there are a few important points to note about processing the data once it&amp;rsquo;s downloaded:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All data is listed in local time. So summer data is in daylight savings time and winter data is in standard time.&lt;/li&gt;
&lt;li&gt;Depending on the quality of the station,&lt;/li&gt;
&lt;li&gt;All pressure data is reported as sea-level pressure. Depending on the weather station, it may be possible to back-calculate to absolute pressure; some manufacturers (e.g., Ambient Weather WS-2902) use a constant offset whereas others (e.g., Davis Vantage Pro2) perform a more complicated barometric pressure reduction using the station&amp;rsquo;s 12-hr temperature and humidity history.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The full Python script is available &lt;a href=&#34;https://zperzan.github.io/files/scrape_wunderground.py&#34;&gt;here&lt;/a&gt; but is also included below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Module to scrape 5-min personal weather station data from Weather Underground.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Usage is:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&amp;gt;&amp;gt; python scrape_wunderground.py   STATION    DATE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;where station is a personal weather station (e.g., KCAJAMES3) and date is in the 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;format YYYY-MM-DD. 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Alternatively, each function below can be imported and used in a separate python
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;script. Note that a working version of chromedriver must be installed and the absolute 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;path to executable has to be updated below (&amp;#34;chromedriver_path&amp;#34;).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Zach Perzan, 2021-07-28&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bs4 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BeautifulSoup &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BS
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; selenium &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; webdriver


&lt;span style=&#34;color:#75715e&#34;&gt;# Set the absolute path to chromedriver&lt;/span&gt;
chromedriver_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/path/to/chromedriver&amp;#39;&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;render_page&lt;/span&gt;(url):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Given a url, render it with chromedriver and return the html source
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parameters
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ----------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        url : str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            url to render
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        r : 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            rendered page source
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    
    driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Chrome(chromedriver_path)
    driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# Could potentially decrease the sleep time&lt;/span&gt;
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_source
    driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quit()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scrape_wunderground&lt;/span&gt;(station, date):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Given a PWS station ID and date, scrape that day&amp;#39;s data from Weather 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Underground and return it as a dataframe.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parameters
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ----------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        station : str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            The personal weather station ID
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        date : str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            The date for which to acquire data, formatted as &amp;#39;YYYY-MM-DD&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        df : dataframe or None
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            A dataframe of weather observations, with index as pd.DateTimeIndex 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            and columns as the observed data
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Render the url and open the page source as BS object&lt;/span&gt;
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.wunderground.com/dashboard/pws/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/table/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/daily&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (station,
                                                                               date, date)
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; render_page(url)
    soup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BS(r, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;html.parser&amp;#34;&lt;/span&gt;,)

    container &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lib-history-table&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Check that lib-history-table is found&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; container &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;could not find lib-history-table in html source for &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; url)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Get the timestamps and data from two separate &amp;#39;tbody&amp;#39; tags&lt;/span&gt;
    all_checks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_all(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tbody&amp;#39;&lt;/span&gt;)
    time_check &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; all_checks[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    data_check &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; all_checks[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Iterate through &amp;#39;tr&amp;#39; tags and get the timestamps&lt;/span&gt;
    hours &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; time_check&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_all(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tr&amp;#39;&lt;/span&gt;):
        trial &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_text()
        hours&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(trial)

    &lt;span style=&#34;color:#75715e&#34;&gt;# For data, locate both value and no-value (&amp;#34;--&amp;#34;) classes&lt;/span&gt;
    classes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wu-value wu-value-to&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wu-unit-no-value ng-star-inserted&amp;#39;&lt;/span&gt;]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Iterate through span tags and get data&lt;/span&gt;
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data_check&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_all(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;span&amp;#39;&lt;/span&gt;, class_&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;classes):
        trial &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_text()
        data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(trial)

    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Temperature&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dew Point&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Humidity&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wind Speed&amp;#39;&lt;/span&gt;, 
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wind Gust&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Pressure&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Precip. Rate&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Precip. Accum.&amp;#39;&lt;/span&gt;]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Convert NaN values (stings of &amp;#39;--&amp;#39;) to np.nan&lt;/span&gt;
    data_nan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Convert list of data to an array&lt;/span&gt;
    data_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(data_nan, dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;float)
    data_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data_array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(columns))

    &lt;span style=&#34;color:#75715e&#34;&gt;# Prepend date to HH:MM strings&lt;/span&gt;
    timestamps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (date, t) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; hours]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Convert to dataframe&lt;/span&gt;
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;timestamps, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data_array, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;columns)
    df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_datetime(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scrape_multiattempt&lt;/span&gt;(station, date, attempts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, wait_time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Try to scrape data from Weather Underground. If there is an error on the 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    first attempt, try again.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parameters
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ----------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        station : str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            The personal weather station ID
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        date : str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            The date for which to acquire data, formatted as &amp;#39;YYYY-MM-DD&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        attempts : int, default 4
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            Maximum number of times to try accessing before failuer
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        wait_time : float, default 5.0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            Amount of time to wait in between attempts
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        df : dataframe or None
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            A dataframe of weather observations, with index as pd.DateTimeIndex 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            and columns as the observed data
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Try to download data limited number of attempts&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(attempts):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scrape_wunderground(station, date)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# if unsuccessful, pause and retry&lt;/span&gt;
            time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(wait_time)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: 
            &lt;span style=&#34;color:#75715e&#34;&gt;# if successful, then break&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# If all attempts failed, return empty df&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
